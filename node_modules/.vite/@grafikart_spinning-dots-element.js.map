{
  "version": 3,
  "sources": ["../@grafikart/spinning-dots-element/index.js", "dep:@grafikart_spinning-dots-element"],
  "sourcesContent": ["export default class SpinningDots extends HTMLElement {\n  static get observedAttributes() { return ['dots'] }\n\n  constructor() {\n    super()\n    this.root = this.attachShadow({ mode: 'open' })\n  }\n\n  connectedCallback() {\n    const styles = window.getComputedStyle(this)\n    const width = this.intFromPx(styles.width, 28)\n    const strokeWidth = this.intFromPx(styles.strokeWidth, (4 / 28) * width, 1)\n    const circles = this.intFromPx(this.getAttribute('dots'), 8)\n    this.root.innerHTML = `<div>\n    ${this.buildStyles(width, circles, strokeWidth)}\n    <svg class=\"circles\" viewBox=\"0 0 ${width} ${width}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      ${this.buildCircles(width, circles, strokeWidth / 2)}\n    </svg>\n    ${this.buildTrail(width, strokeWidth)}\n    </div>`\n  }\n  attributeChangedCallback(){\n    const styles = window.getComputedStyle(this)\n    const width = this.intFromPx(styles.width, 28)\n    const circles = this.intFromPx(this.getAttribute('dots'), 8)\n    const strokeWidth = this.intFromPx(styles.strokeWidth, (4 / 28) * width, 1)\n    if(this.root.querySelector(\".circles\") != null) this.root.querySelector(\".circles\").innerHTML = this.buildCircles(width, circles, strokeWidth / 2)\n  }\n\n  disconnectedCallback() {\n    this.root.innerHTML = ''\n  }\n\n  /**\n   * Builds a SVG with n circles equally spaced around a circle\n   * @param {number} w canvas width\n   * @param {number} n circles count\n   * @param {number} r circles radius\n   * @return {string}\n   */\n  buildCircles(w, n, r) {\n    const circleRadius = w / 2 - r\n    let dom = \"\"\n    for (let i = 0; i < n; i++) {\n      const a = (Math.PI / (n / 2)) * i\n      const x = circleRadius * Math.sin(a) + w / 2\n      const y = circleRadius * Math.cos(a) + w / 2\n      dom += `<circle cx=\"${x}\" cy=\"${y}\" r=\"${r}\" fill=\"currentColor\"/>`\n    }\n    return dom\n  }\n\n  /**\n   * Builds a SVG circle\n   * @param {number} w canvas width\n   * @param {number} stroke stroke width\n   * @return {string}\n   */\n  buildTrail(w, stroke) {\n    return `<svg class=\"halo\" viewBox=\"0 0 ${w} ${w}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"${w / 2}\" cy=\"${w / 2}\" r=\"${w / 2 -\n      stroke / 2}\" stroke-width=\"${stroke}\" stroke-linecap=\"round\" stroke=\"currentColor\"/>\n</svg>`\n  }\n\n  /**\n   * Build the style\n   * @param {number} w canvas width\n   * @param {number} n number of section for the trail\n   * @param {number} stroke size of the stroke\n   * @return {string}\n   */\n  buildStyles(w, n, stroke) {\n    const offset = Math.PI * (w - stroke)\n    return `<style>\n      :host {\n        display: inline-block;\n        width: ${w}px;\n        height: ${w}px;\n      }\n      div {\n        animation: fadeIn .4s cubic-bezier(.1,.6,.3,1);\n        position: relative;\n        width: 100%;\n        height: 100%;\n      }\n      svg {\n        position: absolute;\n        top: 0;\n        left: 0;\n      }\n      .circles {\n        animation: spin 16s linear infinite;\n      }\n      .halo {\n        animation: spin2 1.6s cubic-bezier(.5,.15,.5,.85)  infinite;\n      } \n      .halo circle {\n        stroke-dasharray: ${offset};\n        stroke-dashoffset: ${offset + offset / n};\n        animation: trail 1.6s cubic-bezier(.5,.15,.5,.85)   infinite;\n      }\n      @keyframes spin {\n          from {transform: rotate(0deg); }\n          to {transform: rotate(360deg); }\n      }\n      @keyframes spin2 {\n          from {transform: rotate(0deg); }\n          to {transform: rotate(720deg); }\n      }\n      @keyframes trail {\n        0% { stroke-dashoffset: ${offset + offset / n}; }\n        50% { stroke-dashoffset: ${offset + (2.5 * offset) / n}; }\n        100% { stroke-dashoffset: ${offset + offset / n}; }\n      }\n      @keyframes fadeIn {\n        from { opacity: 0; transform: scale(.1) }\n        to { opacity: 1; transform: scale(1) }\n      }\n    </style>`\n  }\n\n  /**\n   * Extract an int from a string\n   * @param {string} value \"20px\" \"auto\"\n   * @param {number} initial default value\n   * @param {number} min assign default value if the value is under this threshold\n   */\n  intFromPx(value, initial, min = 0) {\n    if (value === null || value === undefined) {\n      return initial\n    }\n    value = parseInt(value.replace('px', ''), 10)\n    if (value > min) {\n      return value\n    }\n    return initial\n  }\n}\n", "import d from \"../node_modules/@grafikart/spinning-dots-element/index.js\";export default d;"],
  "mappings": ";;;AAAA,iCAA0C,YAAY;AAAA,aACzC,qBAAqB;AAAE,WAAO,CAAC;AAAA;AAAA,EAE1C,cAAc;AACZ;AACA,SAAK,OAAO,KAAK,aAAa,EAAE,MAAM;AAAA;AAAA,EAGxC,oBAAoB;AAClB,UAAM,SAAS,OAAO,iBAAiB;AACvC,UAAM,QAAQ,KAAK,UAAU,OAAO,OAAO;AAC3C,UAAM,cAAc,KAAK,UAAU,OAAO,aAAc,IAAI,KAAM,OAAO;AACzE,UAAM,UAAU,KAAK,UAAU,KAAK,aAAa,SAAS;AAC1D,SAAK,KAAK,YAAY;AAAA,MACpB,KAAK,YAAY,OAAO,SAAS;AAAA,wCACC,SAAS;AAAA,QACzC,KAAK,aAAa,OAAO,SAAS,cAAc;AAAA;AAAA,MAElD,KAAK,WAAW,OAAO;AAAA;AAAA;AAAA,EAG3B,2BAA0B;AACxB,UAAM,SAAS,OAAO,iBAAiB;AACvC,UAAM,QAAQ,KAAK,UAAU,OAAO,OAAO;AAC3C,UAAM,UAAU,KAAK,UAAU,KAAK,aAAa,SAAS;AAC1D,UAAM,cAAc,KAAK,UAAU,OAAO,aAAc,IAAI,KAAM,OAAO;AACzE,QAAG,KAAK,KAAK,cAAc,eAAe;AAAM,WAAK,KAAK,cAAc,YAAY,YAAY,KAAK,aAAa,OAAO,SAAS,cAAc;AAAA;AAAA,EAGlJ,uBAAuB;AACrB,SAAK,KAAK,YAAY;AAAA;AAAA,EAUxB,aAAa,GAAG,GAAG,GAAG;AACpB,UAAM,eAAe,IAAI,IAAI;AAC7B,QAAI,MAAM;AACV,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,YAAM,IAAK,KAAK,KAAM,KAAI,KAAM;AAChC,YAAM,IAAI,eAAe,KAAK,IAAI,KAAK,IAAI;AAC3C,YAAM,IAAI,eAAe,KAAK,IAAI,KAAK,IAAI;AAC3C,aAAO,eAAe,UAAU,SAAS;AAAA;AAE3C,WAAO;AAAA;AAAA,EAST,WAAW,GAAG,QAAQ;AACpB,WAAO,kCAAkC,KAAK;AAAA,cACpC,IAAI,UAAU,IAAI,SAAS,IAAI,IACvC,SAAS,oBAAoB;AAAA;AAAA;AAAA,EAWjC,YAAY,GAAG,GAAG,QAAQ;AACxB,UAAM,SAAS,KAAK,KAAM,KAAI;AAC9B,WAAO;AAAA;AAAA;AAAA,iBAGM;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAoBU;AAAA,6BACC,SAAS,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAYb,SAAS,SAAS;AAAA,mCACjB,SAAU,MAAM,SAAU;AAAA,oCACzB,SAAS,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAepD,UAAU,OAAO,SAAS,MAAM,GAAG;AACjC,QAAI,UAAU,QAAQ,UAAU,QAAW;AACzC,aAAO;AAAA;AAET,YAAQ,SAAS,MAAM,QAAQ,MAAM,KAAK;AAC1C,QAAI,QAAQ,KAAK;AACf,aAAO;AAAA;AAET,WAAO;AAAA;AAAA;;;ACxI+D,IAAO,0CAAQ;",
  "names": []
}
