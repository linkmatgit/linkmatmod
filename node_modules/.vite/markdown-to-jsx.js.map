{
  "version": 3,
  "sources": ["../markdown-to-jsx/node_modules/unquote/index.js", "../markdown-to-jsx/index.tsx", "dep:markdown-to-jsx"],
  "sourcesContent": ["var reg = /[\\'\\\"]/\n\nmodule.exports = function unquote(str) {\n  if (!str) {\n    return ''\n  }\n  if (reg.test(str.charAt(0))) {\n    str = str.substr(1)\n  }\n  if (reg.test(str.charAt(str.length - 1))) {\n    str = str.substr(0, str.length - 1)\n  }\n  return str\n}\n", "/* @jsx h */\n/**\n * markdown-to-jsx@6 is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. \uD83D\uDE4F\uD83C\uDFFC\n */\nimport React from 'react'\n/// <reference path=\"unquote.d.ts\" />\nimport unquote from 'unquote'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _list?: boolean\n    inline?: boolean\n    inTable?: boolean\n    inAnchor?: boolean\n    key?: React.Key\n    simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<ParserOutput>\n    react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.Props<any>,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entites are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = {\n  accesskey: 'accessKey',\n  allowfullscreen: 'allowFullScreen',\n  allowtransparency: 'allowTransparency',\n  autocomplete: 'autoComplete',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  charset: 'charSet',\n  class: 'className',\n  classid: 'classId',\n  colspan: 'colSpan',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  crossorigin: 'crossOrigin',\n  enctype: 'encType',\n  for: 'htmlFor',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formmethod: 'formMethod',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  hreflang: 'hrefLang',\n  inputmode: 'inputMode',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  marginheight: 'marginHeight',\n  marginwidth: 'marginWidth',\n  maxlength: 'maxLength',\n  mediagroup: 'mediaGroup',\n  minlength: 'minLength',\n  novalidate: 'noValidate',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  rowspan: 'rowSpan',\n  spellcheck: 'spellCheck',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  tabindex: 'tabIndex',\n  usemap: 'useMap',\n} as const\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              \u21B3 children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     \u2193                \u21B3 disabled: true\n *                     \u21B3 color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   \u21B3 someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\nconst TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R = /(^\\n+|\\n+$|\\s+$)/g\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)'\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +'\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX)\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n)\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_COMMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n  PARAGRAPH_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00E0\u00E1\u00E2\u00E3\u00E4\u00E5\u00E6\u00C6]/g, 'a')\n    .replace(/[\u00E7\u00C7]/g, 'c')\n    .replace(/[\u00F0\u00D0]/g, 'd')\n    .replace(/[\u00C8\u00C9\u00CA\u00CB\u00E9\u00E8\u00EA\u00EB]/g, 'e')\n    .replace(/[\u00CF\u00EF\u00CE\u00EE\u00CD\u00ED\u00CC\u00EC]/g, 'i')\n    .replace(/[\u00D1\u00F1]/g, 'n')\n    .replace(/[\u00F8\u00D8\u0153\u0152\u00D5\u00F5\u00D4\u00F4\u00D3\u00F3\u00D2\u00F2]/g, 'o')\n    .replace(/[\u00DC\u00FC\u00DB\u00FB\u00DA\u00FA\u00D9\u00F9]/g, 'u')\n    .replace(/[\u0178\u00FF\u00DD\u00FD]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state.inTable\n  state.inTable = true\n  const tableRow = parse(source.trim(), state)\n  state.inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: Object\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state.inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state.inline = false\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: JSX.IntrinsicAttributes,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule.match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(content, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(content, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(parse, content, state): MarkdownToJSX.ParserResult {\n  state.inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<\n  ReturnType<typeof parseInline>\n> = (capture, parse, state) => {\n  return {\n    content: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type].react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.replace(TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R, '')}\\n\\n`,\n        { inline }\n      )\n    )\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): React.Props<any> {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n\n    return attributes\n      ? attributes.reduce(function (map, raw, index) {\n          const delimiterIdx = raw.indexOf('=')\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n            const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n            const normalizedValue = (map[\n              mappedKey\n            ] = attributeValueToJSXPropValue(key, value))\n\n            if (\n              typeof normalizedValue === 'string' &&\n              (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n                HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              )\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n          }\n\n          return map\n        }, {})\n      : undefined\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      react(node, output, state) {\n        return (\n          <blockquote key={state.key}>{output(node.content, state)}</blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    breakThematic: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    codeBlock: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          lang: undefined,\n        }\n      },\n\n      react(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; lang?: string }>,\n\n    codeFenced: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return <code key={state.key}>{node.content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    footnoteReference: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)}>\n            <sup key={state.key}>{node.content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; target: string }>,\n\n    gfmTask: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    heading: {\n      match: blockRegex(HEADING_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        }\n      },\n      react(node, output, state) {\n        node.tag = `h${node.level}` as MarkdownToJSX.HTMLTags\n        return (\n          <node.tag id={node.id} key={state.key}>\n            {output(node.content, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      id: string\n      level: number\n      tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    image: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; target: string; title?: string }>,\n\n    link: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)} title={node.title}>\n            {output(node.content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      target: string\n      title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      match: (source, state) => {\n        if (state.inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    list: {\n      match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n        const isListBlock = state._list || !state.inline\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source\n\n          return LIST_R.exec(source)\n        } else {\n          return null\n        }\n      },\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const bullet = capture[2]\n        const ordered = bullet.length > 1\n        const start = ordered ? +bullet : undefined\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R)\n\n        let lastItemWasAParagraph = false\n        const itemContent = items.map(function (item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '')\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1\n          const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph)\n          lastItemWasAParagraph = thisItemIsAParagraph\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state.inline depending\n          // on our list's looseness.\n          const oldStateInline = state.inline\n          const oldStateList = state._list\n          state._list = true\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent\n          if (thisItemIsAParagraph) {\n            state.inline = false\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n          } else {\n            state.inline = true\n            adjustedContent = content.replace(LIST_ITEM_END_R, '')\n          }\n\n          const result = parse(adjustedContent, state)\n\n          // Restore our state before returning\n          state.inline = oldStateInline\n          state._list = oldStateList\n\n          return result\n        })\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        }\n      },\n      react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul'\n\n        return (\n          <Tag key={state.key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>\n            })}\n          </Tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      items: MarkdownToJSX.ParserResult[]\n      ordered: boolean\n      start?: number\n    }>,\n\n    newlineCoalescer: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      match: blockRegex(PARAGRAPH_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <p key={state.key}>{output(node.content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    refImage: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    refLink: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{output(node.fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      fallbackContent: MarkdownToJSX.ParserResult\n      ref: string\n    }>,\n\n    table: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      react(node, output, state) {\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      match: function (source, state) {\n        if (!state.inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      order: Priority.HIGH,\n      parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      react(node /*, output, state*/) {\n        return node.content\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    textBolded: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      react(node, output, state) {\n        return <strong key={state.key}>{output(node.content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      react(node, output, state) {\n        return <em key={state.key}>{output(node.content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textStrikethroughed: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <del key={state.key}>{output(node.content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //     let { match, parse } = rules[key];\n\n  //     rules[key].match = (...args) => {\n  //         const start = performance.now();\n  //         const result = match(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(\n  //                 `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${\n  //                     args[0]\n  //                 }`\n  //             );\n\n  //         return result;\n  //     };\n\n  //     rules[key].parse = (...args) => {\n  //         const start = performance.now();\n  //         const result = parse(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`);\n\n  //         console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0]);\n\n  //         return result;\n  //     };\n  // });\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        const content = noInnerParse ? capture[3] : parseFunc(parse, trimmed, state)\n\n        state.inAnchor = false\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          content,\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node.tag key={state.key} {...node.attrs}>\n            {node.noInnerParse\n              ? (node.content as string)\n              : output(node.content as MarkdownToJSX.ParserResult, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      content: string | ReturnType<MarkdownToJSX.NestedParser>\n      noInnerParse: Boolean\n      tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        }\n      },\n      react(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(ruleOutput(rules))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    jsx.props.children.push(\n      <footer key=\"footer\">\n        {footnotes.map(function createFootnote(def) {\n          return (\n            <div id={options.slugify(def.identifier)} key={def.identifier}>\n              {def.identifier}\n              {emitter(parser(def.footnote, { inline: true }))}\n            </div>\n          )\n        })}\n      </footer>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.Props<any>\n  )\n}\n\nexport default Markdown\n", "import d from \"../node_modules/markdown-to-jsx/dist/index.module.js\";export default d;\nexport * from \"../node_modules/markdown-to-jsx/dist/index.module.js\""],
  "mappings": "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",
  "names": []
}
