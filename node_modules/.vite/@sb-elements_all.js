import "./chunk-VK5M77CT.js";

// node_modules/@sb-elements/all/src/nav-tabs/index.js
var Tabs = class extends HTMLElement {
  constructor() {
    super();
    this.onHashChange = this.onHashChange.bind(this);
  }
  connectedCallback() {
    this.setAttribute("role", "tablist");
    const tabs = Array.from(this.children);
    const hash = window.location.hash.replace("#", "");
    let currentTab = tabs[0];
    tabs.forEach((tab, i) => {
      const id = tab.tagName === "A" ? tab.getAttribute("href").replace("#", "") : tab.getAttribute("aria-controls");
      const tabpanel = document.getElementById(id);
      if (tab.getAttribute("aria-selected") === "true" && hash === "") {
        currentTab = tab;
      }
      if (id === hash) {
        currentTab = tab;
      }
      tab.setAttribute("role", "tab");
      tab.setAttribute("aria-selected", "false");
      tab.setAttribute("tabindex", "-1");
      tab.setAttribute("aria-controls", id);
      tab.getAttribute("id") || tab.setAttribute("id", "tab-" + id);
      tabpanel.setAttribute("role", "tabpanel");
      tabpanel.setAttribute("aria-labelledby", tab.getAttribute("id"));
      tabpanel.setAttribute("hidden", "hidden");
      tabpanel.setAttribute("tabindex", "0");
      tab.addEventListener("keyup", (e) => {
        let index = null;
        if (e.key === "ArrowRight") {
          index = i === tabs.length - 1 ? 0 : i + 1;
        } else if (e.key === "ArrowLeft") {
          index = i === 0 ? tabs.length - 1 : i - 1;
        } else if (e.key === "Home") {
          index = 0;
        } else if (e.key === "End") {
          index = tabs.length - 1;
        }
        if (index !== null) {
          this.activate(tabs[index]);
          tabs[index].focus();
        }
      });
      tab.addEventListener("click", (e) => {
        e.preventDefault();
        this.activate(tab, tab.tagName === "A");
      });
    });
    window.addEventListener("hashchange", this.onHashChange);
    this.activate(currentTab, false);
    if (currentTab.getAttribute("aria-controls") === hash) {
      window.requestAnimationFrame(() => {
        currentTab.scrollIntoView({
          behavior: "smooth"
        });
      });
    }
  }
  disconnectedCallback() {
    window.removeEventListener("hashchange", this.onHashChange);
  }
  onHashChange() {
    const tab = Array.from(this.children).find((tab2) => tab2.getAttribute("href") === window.location.hash);
    if (tab !== void 0) {
      this.activate(tab);
      document.querySelector(window.location.hash).scrollIntoView({
        behavior: "smooth"
      });
    }
  }
  activate(tab, changeHash = true) {
    const currentTab = this.querySelector('[aria-selected="true"]');
    if (currentTab !== null) {
      const tabpanel2 = document.getElementById(currentTab.getAttribute("aria-controls"));
      currentTab.setAttribute("aria-selected", "false");
      currentTab.setAttribute("tabindex", "-1");
      tabpanel2.setAttribute("hidden", "hidden");
    }
    const id = tab.getAttribute("aria-controls");
    const tabpanel = document.getElementById(id);
    tab.setAttribute("aria-selected", "true");
    tab.setAttribute("tabindex", "0");
    tabpanel.removeAttribute("hidden");
    if (changeHash) {
      window.history.replaceState({}, "", "#" + id);
    }
  }
};
if (window.autoDefineComponent !== void 0) {
  customElements.define("nav-tabs", Tabs);
}

// node_modules/@sb-elements/all/src/utils/time.js
function debounce(callback, delay) {
  let timer;
  return function() {
    const args = arguments;
    const context = this;
    clearTimeout(timer);
    timer = setTimeout(function() {
      callback.apply(context, args);
    }, delay);
  };
}
function throttle(callback, delay) {
  let last;
  let timer;
  return function() {
    const context = this;
    const now = +new Date();
    const args = arguments;
    if (last && now < last + delay) {
      clearTimeout(timer);
      timer = setTimeout(function() {
        last = now;
        callback.apply(context, args);
      }, delay);
    } else {
      last = now;
      callback.apply(context, args);
    }
  };
}

// node_modules/@sb-elements/all/src/scroll-top/index.js
var ScrollTop = class extends HTMLElement {
  constructor() {
    super();
    this.onScroll = throttle(this.onScroll.bind(this), 100);
    this.isVisible = false;
  }
  connectedCallback() {
    this.addEventListener("click", () => {
      window.scrollTo({
        top: 0,
        behavior: "smooth"
      });
    });
    window.addEventListener("scroll", this.onScroll);
  }
  disconnectedCallback() {
    window.removeEventListener("scroll", this.onScroll);
  }
  onScroll() {
    const threshold = window.innerHeight / 3;
    if (window.scrollY > threshold && this.isVisible === false) {
      this.removeAttribute("hidden", "hidden");
      this.isVisible = true;
    } else if (window.scrollY < threshold && this.isVisible === true) {
      this.setAttribute("hidden", "hidden");
      this.isVisible = false;
    }
  }
};
if (window.autoDefineComponent !== void 0) {
  customElements.define("scroll-top", ScrollTop);
}

// node_modules/@sb-elements/all/src/modal-dialog/index.js
var ModalDialog = class extends HTMLElement {
  static get observedAttributes() {
    return ["hidden"];
  }
  constructor() {
    super();
    this.close = this.close.bind(this);
    this.onKeyDown = this.onKeyDown.bind(this);
    this.previouslyFocusedElement = null;
    this.trapElements = [];
  }
  connectedCallback() {
    this.setAttribute("aria-modal", "true");
    this.setAttribute("role", "dialog");
    this.addEventListener("click", (e) => {
      if (e.target === this && this.getAttribute("overlay-close") !== null || e.target.dataset.dismiss !== void 0 || e.target.closest("[data-dismiss]") !== null) {
        this.close();
      }
    });
    this.createTrapFocusElement("afterbegin");
    this.createTrapFocusElement("beforeend");
    document.addEventListener("keydown", this.onKeyDown);
  }
  disconnectedCallback() {
    document.removeEventListener("keydown", this.onKeyDown);
    this.trapElements.forEach((element) => element.parentElement.removeChild(element));
    this.trapElements = [];
  }
  attributeChangedCallback(name, oldValue, newValue) {
    if (name === "hidden" && newValue === null) {
      this.previouslyFocusedElement = document.activeElement;
      const firstInput = this.getFocusableElements()[0];
      if (firstInput) {
        firstInput.focus();
      }
      document.addEventListener("keydown", this.onKeyDown);
      this.removeAttribute("aria-hidden");
    }
    if (name === "hidden" && newValue === "hidden") {
      if (this.previouslyFocusedElement !== null) {
        this.previouslyFocusedElement.focus();
      }
      this.previouslyFocusedElement = null;
      this.setAttribute("aria-hidden", "true");
      document.removeEventListener("keydown", this.onKeyDown);
    }
  }
  onKeyDown(e) {
    if (e.key === "Escape") {
      this.close();
    }
  }
  close() {
    const event = new CustomEvent("close", {
      detail: { close: true },
      cancelable: true
    });
    this.dispatchEvent(event);
    if (!event.defaultPrevented) {
      this.setAttribute("hidden", "hidden");
    }
  }
  createTrapFocusElement(position) {
    const element = document.createElement("div");
    element.setAttribute("tabindex", "0");
    element.addEventListener("focus", () => {
      const focusableElements = this.getFocusableElements();
      if (focusableElements.length > 0) {
        focusableElements[position === "afterbegin" ? focusableElements.length - 1 : 0].focus();
      }
    });
    this.trapElements.push(element);
    this.insertAdjacentElement(position, element);
  }
  getFocusableElements() {
    const selector = `[href],
      button:not([disabled]),
      input:not([disabled]),
      select:not([disabled]),
      textarea:not([disabled]),
      [tabindex]:not([tabindex="-1"]`;
    return Array.from(this.querySelectorAll(selector)).filter((element) => {
      const rect = element.getBoundingClientRect();
      return rect.width > 0 && rect.height > 0;
    });
  }
};
if (window.autoDefineComponent !== void 0) {
  customElements.define("modal-dialog", ModalDialog);
}

// node_modules/@sb-elements/all/src/cookie-banner/index.js
function addEventListeners(elements, eventName, callback) {
  Array.from(elements).forEach(function(el) {
    el.addEventListener(eventName, function(e) {
      e.preventDefault();
      callback();
    });
  });
}
function writeCookie(value) {
  document.cookie = `${CookieBanner.cookieName}=${JSON.stringify(value)};max-age=${CookieBanner.expires};path=${CookieBanner.path}`;
}
function readCookie() {
  const prefix = CookieBanner.cookieName + "=";
  for (const cookie of document.cookie.split(/; */)) {
    if (cookie.startsWith(prefix)) {
      return JSON.parse(cookie.replace(prefix, ""));
    }
  }
  return null;
}
var CookieBanner = class extends HTMLElement {
  connectedCallback() {
    if (readCookie() !== null) {
      if (this.parentElement) {
        this.parentElement.removeChild(this);
      } else {
        this.hide();
      }
      return;
    }
    this.removeAttribute("hidden");
    this.removeAttribute("aria-hidden");
    this.setAttribute("tabindex", "0");
    this.setAttribute("role", "dialog");
    this.setAttribute("aria-live", "polite");
    this.addEventListener("keydown", this.onKeyDown.bind(this));
    addEventListeners(this.querySelectorAll("[data-accept]"), "click", this.accept.bind(this));
    addEventListeners(this.querySelectorAll("[data-reject]"), "click", this.reject.bind(this));
    addEventListeners(this.querySelectorAll("form"), "submit", this.accept.bind(this));
  }
  disconnectedCallback() {
    document.removeEventListener("keydown", this.onKeyDown);
  }
  onKeyDown(e) {
    if (e.key === "Escape") {
      this.reject();
    }
  }
  reject() {
    this.dispatchEvent(new CustomEvent("reject"));
    this.hide();
    writeCookie(false);
  }
  accept() {
    const form = this.querySelector("form");
    let detail = {};
    if (form !== null) {
      detail = Object.fromEntries(new FormData(form).entries());
    }
    this.dispatchEvent(new CustomEvent("accept", {
      detail
    }));
    writeCookie(detail);
    this.hide();
  }
  hide() {
    this.removeAttribute("tabindex");
    this.setAttribute("hidden", "hidden");
    this.setAttribute("aria-hidden", "true");
    document.removeEventListener("keydown", this.onKeyDown);
  }
  static hasConsent() {
    const cookie = readCookie();
    if (cookie === null || cookie === false) {
      return false;
    }
    return cookie;
  }
};
CookieBanner.cookieName = "cookieConsent";
CookieBanner.expires = 31104e6;
CookieBanner.path = "/";
if (window.autoDefineComponent !== void 0) {
  customElements.define("cookie-banner", CookieBanner);
}

// node_modules/@sb-elements/all/src/textarea-autogrow/index.js
var Autogrow = class extends HTMLTextAreaElement {
  autogrow() {
    const previousHeight = this.style.height;
    this.style.height = "auto";
    if (this.style.height !== previousHeight) {
      this.dispatchEvent(new CustomEvent("grow", {
        detail: {
          height: this.scrollHeight
        }
      }));
    }
    this.style.height = this.scrollHeight + "px";
  }
  onFocus() {
    this.autogrow();
    window.addEventListener("resize", this.onResize);
    this.removeEventListener("focus", this.onFocus);
  }
  onResize() {
    this.autogrow();
  }
  connectedCallback() {
    this.style.overflow = "hidden";
    this.style.resize = "none";
    this.addEventListener("input", this.autogrow);
    this.addEventListener("focus", this.onFocus);
  }
  disconnectedCallback() {
    window.removeEventListener("resize", this.onResize);
  }
  constructor() {
    super();
    this.autogrow = this.autogrow.bind(this);
    this.onResize = debounce(this.onResize.bind(this), 300);
    this.onFocus = this.onFocus.bind(this);
  }
};
if (window.autoDefineComponent !== void 0) {
  customElements.define("textarea-autogrow", Autogrow, { extends: "textarea" });
}
export {
  CookieBanner,
  ModalDialog,
  Tabs as NavTabs,
  ScrollTop,
  Autogrow as TextareaAutogrow
};
//# sourceMappingURL=@sb-elements_all.js.map
