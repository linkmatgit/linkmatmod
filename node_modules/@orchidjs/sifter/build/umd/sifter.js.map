{"version":3,"file":"sifter.js","sources":["../../lib/diacritics.ts","../../lib/utils.ts","../../lib/sifter.ts"],"sourcesContent":["\ntype TDiacraticList = {[key:string]:string};\n\n// https://github.com/andrewrk/node-diacritics/blob/master/index.js\nexport const DIACRITICS:TDiacraticList = {\n\t\" \":\" \",\n\t0:\"߀\",\n\tA:\"ⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ\",\n\tAA:\"Ꜳ\",\n\tAE:\"ÆǼǢ\",\n\tAO:\"Ꜵ\",\n\tAU:\"Ꜷ\",\n\tAV:\"ꜸꜺ\",\n\tAY:\"Ꜽ\",\n\tB:\"ⒷＢḂḄḆɃƁ\",\n\tC:\"ⒸＣꜾḈĆCĈĊČÇƇȻ\",\n\tD:\"ⒹＤḊĎḌḐḒḎĐƊƉᴅꝹ\",\n\tDh:\"Ð\",\n\tDZ:\"ǱǄ\",\n\tDz:\"ǲǅ\",\n\tE:\"ɛⒺＥÈÉÊỀẾỄỂẼĒḔḖĔĖËẺĚȄȆẸỆȨḜĘḘḚƐƎᴇ\",\n\tF:\"ꝼⒻＦḞƑꝻ\",\n\tG:\"ⒼＧǴĜḠĞĠǦĢǤƓꞠꝽꝾɢ\",\n\tH:\"ⒽＨĤḢḦȞḤḨḪĦⱧⱵꞍ\",\n\tI:\"ⒾＩÌÍÎĨĪĬİÏḮỈǏȈȊỊĮḬƗ\",\n\tJ:\"ⒿＪĴɈȷ\",\n\tK:\"ⓀＫḰǨḲĶḴƘⱩꝀꝂꝄꞢ\",\n\tL:\"ⓁＬĿĹĽḶḸĻḼḺŁȽⱢⱠꝈꝆꞀ\",\n\tLJ:\"Ǉ\",\n\tLj:\"ǈ\",\n\tM:\"ⓂＭḾṀṂⱮƜϻ\",\n\tN:\"ꞤȠⓃＮǸŃÑṄŇṆŅṊṈƝꞐᴎ\",\n\tNJ:\"Ǌ\",\n\tNj:\"ǋ\",\n\tO:\"ⓄＯÒÓÔỒỐỖỔÕṌȬṎŌṐṒŎȮȰÖȪỎŐǑȌȎƠỜỚỠỞỢỌỘǪǬØǾƆƟꝊꝌ\",\n\tOE:\"Œ\",\n\tOI:\"Ƣ\",\n\tOO:\"Ꝏ\",\n\tOU:\"Ȣ\",\n\tP:\"ⓅＰṔṖƤⱣꝐꝒꝔ\",\n\tQ:\"ⓆＱꝖꝘɊ\",\n\tR:\"ⓇＲŔṘŘȐȒṚṜŖṞɌⱤꝚꞦꞂ\",\n\tS:\"ⓈＳẞŚṤŜṠŠṦṢṨȘŞⱾꞨꞄ\",\n\tT:\"ⓉＴṪŤṬȚŢṰṮŦƬƮȾꞆ\",\n\tTh:\"Þ\",\n\tTZ:\"Ꜩ\",\n\tU:\"ⓊＵÙÚÛŨṸŪṺŬÜǛǗǕǙỦŮŰǓȔȖƯỪỨỮỬỰỤṲŲṶṴɄ\",\n\tV:\"ⓋＶṼṾƲꝞɅ\",\n\tVY:\"Ꝡ\",\n\tW:\"ⓌＷẀẂŴẆẄẈⱲ\",\n\tX:\"ⓍＸẊẌ\",\n\tY:\"ⓎＹỲÝŶỸȲẎŸỶỴƳɎỾ\",\n\tZ:\"ⓏＺŹẐŻŽẒẔƵȤⱿⱫꝢ\",\n\ta:\"ⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐɑ\",\n\taa:\"ꜳ\",\n\tae:\"æǽǣ\",\n\tao:\"ꜵ\",\n\tau:\"ꜷ\",\n\tav:\"ꜹꜻ\",\n\tay:\"ꜽ\",\n\tb:\"ⓑｂḃḅḇƀƃɓƂ\",\n\tc:\"ｃⓒćĉċčçḉƈȼꜿↄ\",\n\td:\"ⓓｄḋďḍḑḓḏđƌɖɗƋᏧԁꞪ\",\n\tdh:\"ð\",\n\tdz:\"ǳǆ\",\n\te:\"ⓔｅèéêềếễểẽēḕḗĕėëẻěȅȇẹệȩḝęḙḛɇǝ\",\n\tf:\"ⓕｆḟƒ\",\n\tff:\"ﬀ\",\n\tfi:\"ﬁ\",\n\tfl:\"ﬂ\",\n\tffi:\"ﬃ\",\n\tffl:\"ﬄ\",\n\tg:\"ⓖｇǵĝḡğġǧģǥɠꞡꝿᵹ\",\n\th:\"ⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ\",\n\thv:\"ƕ\",\n\ti:\"ⓘｉìíîĩīĭïḯỉǐȉȋịįḭɨı\",\n\tj:\"ⓙｊĵǰɉ\",\n\tk:\"ⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ\",\n\tl:\"ⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇɭ\",\n\tlj:\"ǉ\",\n\tm:\"ⓜｍḿṁṃɱɯ\",\n\tn:\"ⓝｎǹńñṅňṇņṋṉƞɲŉꞑꞥлԉ\",\n\tnj:\"ǌ\",\n\to:\"ⓞｏòóôồốỗổõṍȭṏōṑṓŏȯȱöȫỏőǒȍȏơờớỡởợọộǫǭøǿꝋꝍɵɔᴑ\",\n\toe:\"œ\",\n\toi:\"ƣ\",\n\too:\"ꝏ\",\n\tou:\"ȣ\",\n\tp:\"ⓟｐṕṗƥᵽꝑꝓꝕρ\",\n\tq:\"ⓠｑɋꝗꝙ\",\n\tr:\"ⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ\",\n\ts:\"ⓢｓśṥŝṡšṧṣṩșşȿꞩꞅẛʂ\",\n\tss:\"ß\",\n\tt:\"ⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ\",\n\tth:\"þ\",\n\ttz:\"ꜩ\",\n\tu:\"ⓤｕùúûũṹūṻŭüǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ\",\n\tv:\"ⓥｖṽṿʋꝟʌ\",\n\tvy:\"ꝡ\",\n\tw:\"ⓦｗẁẃŵẇẅẘẉⱳ\",\n\tx:\"ⓧｘẋẍ\",\n\ty:\"ⓨｙỳýŷỹȳẏÿỷẙỵƴɏỿ\",\n\tz:\"ⓩｚźẑżžẓẕƶȥɀⱬꝣ\"\n}\n\n/**\n * code points generated from toCodePoints();\n * removed 65339 to 65345\n */\nvar code_points = [\n\t[ 67, 67 ],\n\t[ 160, 160 ],\n\t[ 192, 438 ],\n\t[ 452, 652 ],\n\t[ 961, 961 ],\n\t[ 1019, 1019 ],\n\t[ 1083, 1083 ],\n\t[ 1281, 1289 ],\n\t[ 1984, 1984 ],\n\t[ 5095, 5095 ],\n\t[ 7429, 7441 ],\n\t[ 7545, 7549 ],\n\t[ 7680, 7935 ],\n\t[ 8580, 8580 ],\n\t[ 9398, 9449 ],\n\t[ 11360, 11391 ],\n\t[ 42792, 42793 ],\n\t[ 42802, 42851 ],\n\t[ 42873, 42897 ],\n\t[ 42912, 42922 ],\n\t[ 64256, 64260 ],\n\t[ 65313, 65338 ],\n\t[ 65345, 65370 ]\n];\n\n/**\n * Remove accents\n * via https://github.com/krisk/Fuse/issues/133#issuecomment-318692703\n *\n */\nexport const asciifold = (str:string):string => {\n\treturn str.normalize('NFD').replace(/[\\u0300-\\u036F]/g, '').normalize('NFKD').toLowerCase();\n};\n\n\n/**\n * Convert list of diacritics to array of code points\n *\n */\n// @ts-ignore\nfunction toCodePoints(tolerance=8){\n\tvar char_codes:number[] = [];\n\n\tfor( let letter in DIACRITICS ){\n\t\tlet _diacritics = DIACRITICS[letter];\n\t\tfor( let n = 0; n < _diacritics.length; n++ ){\n\t\t\tvar code_point = _diacritics.codePointAt(n);\n\t\t\tif( code_point ) char_codes.push( code_point );\n\t\t}\n\t}\n\n\t//https://stackoverflow.com/questions/40431572/is-there-a-simple-way-to-group-js-array-values-by-range\n\tchar_codes.sort((a, b) => a - b);\n\tvar accumulator: number[][] = [];\n    var result = char_codes.reduce(function (accumulator, currentValue, index, source) {\n\n\t\tif( !index ){\n\t\t\taccumulator.push( [currentValue,currentValue] );\n\n\t\t}else if( currentValue - source[index - 1] > tolerance ){\n\t\t\taccumulator.push( [currentValue,currentValue] );\n\n\t\t}else{\n\n\t\t\tlet range = accumulator.pop();\n\t\t\tif( range ){\n\t\t\t\taccumulator.push( [range[0],currentValue]);\n\t\t\t}\n\t\t}\n\n        return accumulator;\n    }, accumulator);\n\n\tconsole.log(`char_codes (${result.length})`,result);\n}\n\n/**\n * Generate a list of diacritics from the list of code points\n *\n */\nexport const generateDiacritics = ():TDiacraticList => {\n\n\tvar latin_convert:{[key:string]:string} = {\n\t\t'l·': 'l',\n\t\t'ʼn': 'n',\n\t\t'æ': 'ae',\n\t\t'ø': 'o',\n\t\t'aʾ': 'a',\n\t\t'dž': 'dz',\n\t};\n\n\tvar diacritics:{[key:string]:string} = {};\n\t//var no_latin\t= [];\n\tcode_points.forEach((code_range)=>{\n\n\t\tfor(let i = code_range[0]; i <= code_range[1]; i++){\n\t\t\tlet diacritic\t= String.fromCharCode(i);\n\t\t\tlet latin\t\t= diacritic.normalize('NFD').replace(/[\\u0300-\\u036F]/g, '').normalize('NFKD');\n\n\t\t\tif( latin == diacritic ){\n\t\t\t\t//no_latin.push(diacritic);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlatin = latin.toLowerCase();\n\n\t\t\tif( latin in latin_convert ){\n\t\t\t\tlatin = latin_convert[latin];\n\t\t\t}\n\n\t\t\tif( !(latin in diacritics) ){\n\t\t\t\tdiacritics[latin] = latin + latin.toUpperCase();\n\t\t\t}\n\t\t\tdiacritics[latin] += diacritic;\n\t\t}\n\t});\n\n\t//console.log('no_latin',JSON.stringify(no_latin));\n\n\treturn diacritics;\n}\n\n/**\n * Expand a regular expression pattern to include diacritics\n * \teg /a/ becomes /aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐɑAⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ/\n *\n */\nvar diacritics:null|TDiacraticList = null\nexport const diacriticRegexPoints = (regex:string):string => {\n\n\tif( diacritics === null ){\n\t\tdiacritics = generateDiacritics();\n\t}\n\n\tfor( let latin in diacritics ){\n\t\tif( diacritics.hasOwnProperty(latin) ){\n\t\t\tregex = regex.replace( new RegExp(latin,'g'), '['+diacritics[latin]+']');\n\t\t}\n\t}\n\treturn regex;\n}\n\n\n/**\n * Expand a regular expression pattern to include diacritics\n * \teg /a/ becomes /aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐɑAⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ/\n *\n * rollup will bundle this function (and the DIACRITICS constant) unless commented out\n *\nvar diacriticRegex = (function() {\n\n\tvar list = [];\n\tfor( let letter in DIACRITICS ){\n\n\t\tif( letter.toLowerCase() != letter && letter.toLowerCase() in DIACRITICS ){\n\t\t\tcontinue;\n\t\t}\n\n\t\tif( DIACRITICS.hasOwnProperty(letter) ){\n\n\t\t\tvar replace = letter + DIACRITICS[letter];\n\t\t\tif( letter.toUpperCase() in DIACRITICS ){\n\t\t\t\treplace += letter.toUpperCase() + DIACRITICS[letter.toUpperCase()];\n\t\t\t}\n\n\t\t\tlist.push({let:letter,pat:'['+replace+']'});\n\t\t}\n\t}\n\n\treturn function(regex:string):string{\n\t\tlist.forEach((item)=>{\n\t\t\tregex = regex.replace( new RegExp(item.let,'g'),item.pat);\n\t\t});\n\t\treturn regex;\n\t}\n})();\n*/\n","\n// @ts-ignore TS2691 \"An import path cannot end with a '.ts' extension\"\nimport { asciifold } from './diacritics.ts';\n\n// @ts-ignore TS2691 \"An import path cannot end with a '.ts' extension\"\nimport * as T from './types.ts';\n\n\n/**\n * A property getter resolving dot-notation\n * @param  {Object}  obj     The root object to fetch property on\n * @param  {String}  name    The optionally dotted property name to fetch\n * @return {Object}          The resolved property value\n */\nexport const getAttr = (obj:{[key:string]:any}, name:string ) => {\n    if (!obj ) return;\n    return obj[name];\n};\n\n/**\n * A property getter resolving dot-notation\n * @param  {Object}  obj     The root object to fetch property on\n * @param  {String}  name    The optionally dotted property name to fetch\n * @return {Object}          The resolved property value\n */\nexport const getAttrNesting = (obj:{[key:string]:any}, name:string ) => {\n    if (!obj ) return;\n    var part, names = name.split(\".\");\n\twhile( (part = names.shift()) && (obj = obj[part]));\n    return obj;\n};\n\n/**\n * Calculates how close of a match the\n * given value is against a search token.\n *\n */\nexport const scoreValue = (value:string, token:T.Token, weight:number ):number => {\n\tvar score, pos;\n\n\tif (!value) return 0;\n\n\tvalue = value + '';\n\tpos = value.search(token.regex);\n\tif (pos === -1) return 0;\n\n\tscore = token.string.length / value.length;\n\tif (pos === 0) score += 0.5;\n\n\treturn score * weight;\n};\n\nexport const escape_regex = (str:string):string => {\n\treturn (str + '').replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n};\n\n\n/**\n * Cast object property to an array if it exists and has a value\n *\n */\nexport const propToArray = (obj:{[key:string]:any}, key:string) => {\n\tvar value = obj[key];\n\tif( value && !Array.isArray(value) ){\n\t\tobj[key] = [value];\n\t}\n}\n\n\n/**\n * Iterates over arrays and hashes.\n *\n * ```\n * iterate(this.items, function(item, id) {\n *    // invoked for each item\n * });\n * ```\n *\n */\nexport const iterate = (object:[]|{[key:string]:any}, callback:(value:any,key:number|string)=>any) => {\n\n\tif ( Array.isArray(object)) {\n\t\tobject.forEach(callback);\n\n\t}else{\n\n\t\tfor (var key in object) {\n\t\t\tif (object.hasOwnProperty(key)) {\n\t\t\t\tcallback(object[key], key);\n\t\t\t}\n\t\t}\n\t}\n};\n\n\n\nexport const cmp = (a:number|string, b:number|string) => {\n\tif (typeof a === 'number' && typeof b === 'number') {\n\t\treturn a > b ? 1 : (a < b ? -1 : 0);\n\t}\n\ta = asciifold(a + '').toLowerCase();\n\tb = asciifold(b + '').toLowerCase();\n\tif (a > b) return 1;\n\tif (b > a) return -1;\n\treturn 0;\n};\n","/**\n * sifter.js\n * Copyright (c) 2013–2020 Brian Reavis & contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n * @author Brian Reavis <brian@thirdroute.com>\n */\n\n // @ts-ignore TS2691 \"An import path cannot end with a '.ts' extension\"\nimport { scoreValue, getAttr, getAttrNesting, escape_regex, propToArray, iterate, cmp } from './utils.ts';\n// @ts-ignore TS2691 \"An import path cannot end with a '.ts' extension\"\nimport { diacriticRegexPoints, asciifold } from './diacritics.ts';\n// @ts-ignore TS2691 \"An import path cannot end with a '.ts' extension\"\nimport * as T from 'types.ts';\n\nexport default class Sifter{\n\n\tpublic items; // []|{};\n\tpublic settings: T.Settings;\n\n\t/**\n\t * Textually searches arrays and hashes of objects\n\t * by property (or multiple properties). Designed\n\t * specifically for autocomplete.\n\t *\n\t */\n\tconstructor(items:any, settings:T.Settings) {\n\t\tthis.items = items;\n\t\tthis.settings = settings || {diacritics: true};\n\t};\n\n\t/**\n\t * Splits a search string into an array of individual\n\t * regexps to be used to match results.\n\t *\n\t */\n\ttokenize(query:string, respect_word_boundaries?:boolean, weights?:T.Weights ):T.Token[] {\n\t\tif (!query || !query.length) return [];\n\n\t\tconst tokens:T.Token[]\t= [];\n\t\tconst words\t\t\t\t= query.split(/\\s+/);\n\t\tvar field_regex:RegExp;\n\n\t\tif( weights ){\n\t\t\tfield_regex = new RegExp( '^('+ Object.keys(weights).map(escape_regex).join('|')+')\\:(.*)$');\n\t\t}\n\n\t\twords.forEach((word:string) => {\n\t\t\tlet field_match;\n\t\t\tlet field:null|string\t= null;\n\t\t\tlet regex:null|string\t= null;\n\n\t\t\t// look for \"field:query\" tokens\n\t\t\tif( field_regex && (field_match = word.match(field_regex)) ){\n\t\t\t\tfield\t= field_match[1];\n\t\t\t\tword\t= field_match[2];\n\t\t\t}\n\n\t\t\tif( word.length > 0 ){\n\t\t\t\tregex = escape_regex(word);\n\t\t\t\tif( this.settings.diacritics ){\n\t\t\t\t\tregex = diacriticRegexPoints(regex);\n\t\t\t\t}\n\t\t\t\tif( respect_word_boundaries ) regex = \"\\\\b\"+regex;\n\t\t\t}\n\n\t\t\ttokens.push({\n\t\t\t\tstring : word,\n\t\t\t\tregex  : regex ? new RegExp(regex,'i') : null,\n\t\t\t\tfield  : field,\n\t\t\t});\n\t\t});\n\n\t\treturn tokens;\n\t};\n\n\n\t/**\n\t * Returns a function to be used to score individual results.\n\t *\n\t * Good matches will have a higher score than poor matches.\n\t * If an item is not a match, 0 will be returned by the function.\n\t *\n\t * @returns {function}\n\t */\n\tgetScoreFunction(query:string, options:T.Options ){\n\t\tvar search = this.prepareSearch(query, options);\n\t\treturn this._getScoreFunction(search);\n\t}\n\n\t_getScoreFunction(search:T.PrepareObj ){\n\t\tconst tokens\t\t= search.tokens,\n\t\ttoken_count\t\t\t= tokens.length;\n\n\t\tif (!token_count) {\n\t\t\treturn function() { return 0; };\n\t\t}\n\n\t\tconst fields\t= search.options.fields,\n\t\tweights\t\t\t= search.weights,\n\t\tfield_count\t\t= fields.length,\n\t\tgetAttrFn\t\t= search.getAttrFn;\n\n\t\tif (!field_count) {\n\t\t\treturn function() { return 1; };\n\t\t}\n\n\n\t\t/**\n\t\t * Calculates the score of an object\n\t\t * against the search query.\n\t\t *\n\t\t */\n\t\tconst scoreObject = (function() {\n\n\n\t\t\tif (field_count === 1) {\n\t\t\t\treturn function(token:T.Token, data:{}) {\n\t\t\t\t\tconst field = fields[0].field;\n\t\t\t\t\treturn scoreValue(getAttrFn(data, field), token, weights[field]);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn function(token:T.Token, data:{}) {\n\t\t\t\tvar sum = 0;\n\n\t\t\t\t// is the token specific to a field?\n\t\t\t\tif( token.field ){\n\n\t\t\t\t\tconst value = getAttrFn(data, token.field);\n\n\t\t\t\t\tif( !token.regex && value ){\n\t\t\t\t\t\tsum += (1/field_count);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tsum += scoreValue(value, token, 1);\n\t\t\t\t\t}\n\n\n\n\t\t\t\t}else{\n\t\t\t\t\titerate(weights, (weight:number, field:string) => {\n\t\t\t\t\t\tsum += scoreValue(getAttrFn(data, field), token, weight);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn sum / field_count;\n\t\t\t};\n\t\t})();\n\n\t\tif (token_count === 1) {\n\t\t\treturn function(data:{}) {\n\t\t\t\treturn scoreObject(tokens[0], data);\n\t\t\t};\n\t\t}\n\n\t\tif (search.options.conjunction === 'and') {\n\t\t\treturn function(data:{}) {\n\t\t\t\tvar i = 0, score, sum = 0;\n\t\t\t\tfor (; i < token_count; i++) {\n\t\t\t\t\tscore = scoreObject(tokens[i], data);\n\t\t\t\t\tif (score <= 0) return 0;\n\t\t\t\t\tsum += score;\n\t\t\t\t}\n\t\t\t\treturn sum / token_count;\n\t\t\t};\n\t\t} else {\n\t\t\treturn function(data:{}) {\n\t\t\t\tvar sum = 0;\n\t\t\t\titerate(tokens,(token:T.Token)=>{\n\t\t\t\t\tsum += scoreObject(token, data);\n\t\t\t\t});\n\t\t\t\treturn sum / token_count;\n\t\t\t};\n\t\t}\n\t};\n\n\t/**\n\t * Returns a function that can be used to compare two\n\t * results, for sorting purposes. If no sorting should\n\t * be performed, `null` will be returned.\n\t *\n\t * @return function(a,b)\n\t */\n\tgetSortFunction(query:string, options:T.Options) {\n\t\tvar search  = this.prepareSearch(query, options);\n\t\treturn this._getSortFunction(search);\n\t}\n\n\t_getSortFunction(search:T.PrepareObj){\n\t\tvar i, n, implicit_score;\n\n\t\tconst self\t= this,\n\t\toptions\t\t= search.options,\n\t\tsort\t\t= (!search.query && options.sort_empty) ? options.sort_empty : options.sort,\n\t\tsort_flds:T.Sort[]\t\t= [],\n\t\tmultipliers:number[]\t= [];\n\n\n\t\t/**\n\t\t * Fetches the specified sort field value\n\t\t * from a search result item.\n\t\t *\n\t\t */\n\t\tconst get_field = function(name:string, result:T.ResultItem):string|number {\n\t\t\tif (name === '$score') return result.score;\n\t\t\treturn search.getAttrFn(self.items[result.id], name);\n\t\t};\n\n\t\t// parse options\n\t\tif (sort) {\n\t\t\tfor (i = 0, n = sort.length; i < n; i++) {\n\t\t\t\tif (search.query || sort[i].field !== '$score') {\n\t\t\t\t\tsort_flds.push(sort[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// the \"$score\" field is implied to be the primary\n\t\t// sort field, unless it's manually specified\n\t\tif (search.query) {\n\t\t\timplicit_score = true;\n\t\t\tfor (i = 0, n = sort_flds.length; i < n; i++) {\n\t\t\t\tif (sort_flds[i].field === '$score') {\n\t\t\t\t\timplicit_score = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (implicit_score) {\n\t\t\t\tsort_flds.unshift({field: '$score', direction: 'desc'});\n\t\t\t}\n\t\t} else {\n\t\t\tfor (i = 0, n = sort_flds.length; i < n; i++) {\n\t\t\t\tif (sort_flds[i].field === '$score') {\n\t\t\t\t\tsort_flds.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, n = sort_flds.length; i < n; i++) {\n\t\t\tmultipliers.push(sort_flds[i].direction === 'desc' ? -1 : 1);\n\t\t}\n\n\t\t// build function\n\t\tconst sort_flds_count = sort_flds.length;\n\t\tif (!sort_flds_count) {\n\t\t\treturn null;\n\t\t} else if (sort_flds_count === 1) {\n\t\t\tconst sort_fld = sort_flds[0].field;\n\t\t\tconst multiplier = multipliers[0];\n\t\t\treturn function(a:T.ResultItem, b:T.ResultItem) {\n\t\t\t\treturn multiplier * cmp(\n\t\t\t\t\tget_field(sort_fld, a),\n\t\t\t\t\tget_field(sort_fld, b)\n\t\t\t\t);\n\t\t\t};\n\t\t} else {\n\t\t\treturn function(a:T.ResultItem, b:T.ResultItem) {\n\t\t\t\tvar i, result, field;\n\t\t\t\tfor (i = 0; i < sort_flds_count; i++) {\n\t\t\t\t\tfield = sort_flds[i].field;\n\t\t\t\t\tresult = multipliers[i] * cmp(\n\t\t\t\t\t\tget_field(field, a),\n\t\t\t\t\t\tget_field(field, b)\n\t\t\t\t\t);\n\t\t\t\t\tif (result) return result;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\t};\n\n\t/**\n\t * Parses a search query and returns an object\n\t * with tokens and fields ready to be populated\n\t * with results.\n\t *\n\t */\n\tprepareSearch(query:string, optsUser:T.Options):T.PrepareObj {\n\t\tconst weights:T.Weights = {};\n\t\tvar options\t\t= Object.assign({},optsUser);\n\n\t\tpropToArray(options,'sort');\n\t\tpropToArray(options,'sort_empty');\n\n\t\t// convert fields to new format\n\t\tif( options.fields ){\n\t\t\tpropToArray(options,'fields');\n\t\t\tconst fields:T.Field[] = [];\n\t\t\toptions.fields.forEach((field:string|T.Field) => {\n\t\t\t\tif( typeof field == 'string' ){\n\t\t\t\t\tfield = {field:field,weight:1};\n\t\t\t\t}\n\t\t\t\tfields.push(field);\n\t\t\t\tweights[field.field] = ('weight' in field) ? field.weight : 1;\n\t\t\t});\n\t\t\toptions.fields = fields;\n\t\t}\n\n\t\tquery = asciifold( query + '' ).toLowerCase().trim();\n\n\t\treturn {\n\t\t\toptions\t\t: options,\n\t\t\tquery\t\t: query,\n\t\t\ttokens\t\t: this.tokenize(query, options.respect_word_boundaries, weights),\n\t\t\ttotal\t\t: 0,\n\t\t\titems\t\t: [],\n\t\t\tweights\t\t: weights,\n\t\t\tgetAttrFn\t: (options.nesting) ? getAttrNesting : getAttr,\n\t\t};\n\t};\n\n\t/**\n\t * Searches through all items and returns a sorted array of matches.\n\t *\n\t */\n\tsearch(query:string, options:T.Options) : T.PrepareObj {\n\t\tvar self = this, score, search:T.PrepareObj;\n\n\t\tsearch  = this.prepareSearch(query, options);\n\t\toptions = search.options;\n\t\tquery   = search.query;\n\n\t\t// generate result scoring function\n\t\tconst fn_score = options.score || self._getScoreFunction(search);\n\n\t\t// perform search and sort\n\t\tif (query.length) {\n\t\t\titerate(self.items, (item:T.ResultItem, id:string|number) => {\n\t\t\t\tscore = fn_score(item);\n\t\t\t\tif (options.filter === false || score > 0) {\n\t\t\t\t\tsearch.items.push({'score': score, 'id': id});\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\titerate(self.items, (item:T.ResultItem, id:string|number) => {\n\t\t\t\tsearch.items.push({'score': 1, 'id': id});\n\t\t\t});\n\t\t}\n\n\t\tconst fn_sort = self._getSortFunction(search);\n\t\tif (fn_sort) search.items.sort(fn_sort);\n\n\t\t// apply limits\n\t\tsearch.total = search.items.length;\n\t\tif (typeof options.limit === 'number') {\n\t\t\tsearch.items = search.items.slice(0, options.limit);\n\t\t}\n\n\t\treturn search;\n\t};\n}\n"],"names":["code_points","asciifold","str","normalize","replace","toLowerCase","generateDiacritics","latin_convert","diacritics","forEach","code_range","i","diacritic","String","fromCharCode","latin","toUpperCase","diacriticRegexPoints","regex","hasOwnProperty","RegExp","getAttr","obj","name","getAttrNesting","part","names","split","shift","scoreValue","value","token","weight","score","pos","search","string","length","escape_regex","propToArray","key","Array","isArray","iterate","object","callback","cmp","a","b","Sifter","constructor","items","settings","tokenize","query","respect_word_boundaries","weights","tokens","words","field_regex","Object","keys","map","join","word","field_match","field","match","push","getScoreFunction","options","prepareSearch","_getScoreFunction","token_count","fields","field_count","getAttrFn","scoreObject","data","sum","conjunction","getSortFunction","_getSortFunction","n","implicit_score","self","sort","sort_empty","sort_flds","multipliers","get_field","result","id","unshift","direction","splice","sort_flds_count","sort_fld","multiplier","optsUser","assign","trim","total","nesting","fn_score","item","filter","fn_sort","limit","slice"],"mappings":"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"}